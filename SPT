

'''
https://www.codechef.com/NOV20B/problems/SCALSUM

LINK TO THE QUESTION
''





from collections import defaultdict
from collections import deque

class Node():
    def __init__(self,index=None,weight=None,parent=None):
        self.index=index
        self.weight=weight
        self.child=[]
        self.parent=parent
        self.f=[]
        
def pri(dic):
    for key,value in dic.items():
        print("key",key,end=" ")
        print("weight",value.weight)
        for i in value.child:
            print(i.index)
            print("parent",i.parent.index)
        print(value.f)
        print()

#n is the no of nodes and q is the no of queries.
n,q=map(int,input().split())
w=list(map(int,input().split()))

#dic holds all the nodes with key as node index
dic={}
for i in range(1,n+1):
    dic[i]=Node(index=i,weight=w[i-1])

#dic2 holds all the node indexes that key is connected to.
dic2=defaultdict(list)
for i in range(n-1):
    u,v=map(int,input().split())
    dic2[u].append(v)
    dic2[v].append(u)

#Starting BFS with 1
que=deque([1])
done=set([1])
dic[1].f=[dic[1].weight]
while que:
    
    parent=que.popleft()
    #print(parent,dic2)
    
    for child in dic2[parent]:
        if child in done:
            None
        else:
            dic[parent].child.append(dic[child])
            dic[child].parent=dic[parent]
            dic[child].f=dic[parent].f+[dic[child].weight]
            que.append(child)
            done.add(child)
    
    #print(que)
#pri(dic)

mem={}
for i in range(q):
    u,v=map(int,input().split())
    
    if (u,v) in mem:
        print(mem[(u,v)])
        
    else:
        x=len(dic[u].f)
        uval=dic[u].f
        vval=dic[v].f
        ans=0
        
        for i in range(len(uval)):
            ans+=uval[i]*vval[i]
            
        ans=ans%(2**32)
        mem[(u,v)]=ans
        print(ans)
